<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="chatroom.css">
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"></script>
    <title>WebRTC Chatroom</title>
</head>
<body>
    <h1>Tutors4Zoomers Chat</h1>
<!--    <div id="localVideoContainer"></div>-->
<!--    <div id="remoteVideoContainer"></div>-->
    <video id="localVideo" autoplay playsinline></video>
    <video id="remoteVideo" autoplay playsinline></video>

    <div>
        <button id="startButton">Start</button>
        <button id="callButton">Call</button>
        <button id="endButton">Hang up</button>
    </div>

    <div>
        <div id="conversation"></div>
        <input id="msg" type="text">
        <input id="sendMsg" type="button" value="Send">
    </div>

    <div>
        <p>Online</p>
        <div id="onlineUser"></div>
    </div>

    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
<!--    <script src="chatroom.js"></script>-->
    <script>
        let socket = io();
        socket.on("connect", () => {
            socket.emit("addUser", prompt("Hello! What is your name?"));
        });

        socket.on("updateChat", (username, data) => {
            $("#conversation").append("<b>" + username + "</b>" + data + "</br>");
        })

        socket.on("updateStatus", (userList) => {
            let onlineStatus = $("#onlineUser");
            document.getElementById("onlineUser").innerHTML = "";
            for(let i = 0; i < userList.length; i++) {
                onlineStatus.append("<b>" + userList[i] + "</b></br>");
            }
        })

        socket.on("connectVideo", (userList) => {
            // for(let i = 0; i < userList.length; i++) {
            //     let videoId = "localVideo" + userList[i];
            //
            //     const mediaStreamConstraints = {
            //         video: true,
            //         // audio: true,
            //     };
            //     const localVideo = document.getElementById(videoId);
            //     let localStream;
            //     function gotLocalMediaStream(mediaStream) {
            //         localStream = mediaStream;
            //         localVideo.srcObject = mediaStream;
            //     }
            //
            //     function handleLocalMediaStreamError(error) {
            //         console.log('navigator.getUserMedia error: ', error);
            //     }
            //
            //     navigator.mediaDevices.getUserMedia(mediaStreamConstraints)
            //         .then(gotLocalMediaStream).catch(handleLocalMediaStreamError)

            // for(let i = 0; i < userList.length; i++) {
            //     let localVideoId = "localVideo" + userList[i];
            //     let remoteVideoId = "remoteVideo" + userList[i];


                'use strict';

                let isChannelReady = false;
                let isInitiator = false;
                let isStarted = false;
                let localStream;
                let pc;
                let remoteStream;
                let turnReady;

                let pcConfig = {
                    'iceServers': [{
                        'urls': 'stun:stun.l.google.com:19302'
                    }]
                };

// Set up audio and video regardless of what devices are present.
                let sdpConstraints = {
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                };

/////////////////////////////////////////////

                let room = 'foo';
// Could prompt for room name:
// room = prompt('Enter room name:');

                if (room !== '') {
                    socket.emit('create or join', room);
                    console.log('Attempted to create or  join room', room);
                }

                socket.on('created', function(room) {
                    console.log('Created room ' + room);
                    isInitiator = true;
                });

                socket.on('full', function(room) {
                    console.log('Room ' + room + ' is full');
                });

                socket.on('join', function (room){
                    console.log('Another peer made a request to join room ' + room);
                    console.log('This peer is the initiator of room ' + room + '!');
                    isChannelReady = true;
                });

                socket.on('joined', function(room) {
                    console.log('joined: ' + room);
                    isChannelReady = true;
                });

                socket.on('log', function(array) {
                    console.log.apply(console, array);
                });

////////////////////////////////////////////////

                function sendMessage(message) {
                    console.log('Client sending message: ', message);
                    socket.emit('message', message);
                }

// This client receives a message
                socket.on('message', function(message) {
                    console.log('Client received message:', message);
                    if (message === 'got user media') {
                        maybeStart();
                    } else if (message.type === 'offer') {
                        if (!isInitiator && !isStarted) {
                            maybeStart();
                        }
                        pc.setRemoteDescription(new RTCSessionDescription(message));
                        doAnswer();
                    } else if (message.type === 'answer' && isStarted) {
                        pc.setRemoteDescription(new RTCSessionDescription(message));
                    } else if (message.type === 'candidate' && isStarted) {
                        let candidate = new RTCIceCandidate({
                            sdpMLineIndex: message.label,
                            candidate: message.candidate
                        });
                        pc.addIceCandidate(candidate);
                    } else if (message === 'bye' && isStarted) {
                        handleRemoteHangup();
                    }
                });

////////////////////////////////////////////////////

                let localVideo = document.getElementById("localVideo");
                let remoteVideo = document.getElementById("remoteVideo");

                navigator.mediaDevices.getUserMedia({
                    audio: false,
                    video: true
                })
                    .then(gotStream)
                    .catch(function(e) {
                        alert('getUserMedia() error: ' + e.name);
                    });

                function gotStream(stream) {
                    console.log('Adding local stream.');
                    localStream = stream;
                    localVideo.srcObject = stream;
                    sendMessage('got user media');
                    if (isInitiator) {
                        maybeStart();
                    }
                }

                let constraints = {
                    video: true
                };

                console.log('Getting user media with constraints', constraints);

                if (location.hostname !== 'localhost') {
                    requestTurn(
                        'https://computeengineondemand.appspot.com/turn?username=41784574&key=4080218913'
                    );
                }

                function maybeStart() {
                    console.log('>>>>>>> maybeStart() ', isStarted, localStream, isChannelReady);
                    if (!isStarted && typeof localStream !== 'undefined' && isChannelReady) {
                        console.log('>>>>>> creating peer connection');
                        createPeerConnection();
                        pc.addStream(localStream);
                        isStarted = true;
                        console.log('isInitiator', isInitiator);
                        if (isInitiator) {
                            doCall();
                        }
                    }
                }

                window.onbeforeunload = function() {
                    sendMessage('bye');
                };

/////////////////////////////////////////////////////////

                function createPeerConnection() {
                    try {
                        pc = new RTCPeerConnection(null);
                        pc.onicecandidate = handleIceCandidate;
                        pc.onaddstream = handleRemoteStreamAdded;
                        pc.onremovestream = handleRemoteStreamRemoved;
                        console.log('Created RTCPeerConnnection');
                    } catch (e) {
                        console.log('Failed to create PeerConnection, exception: ' + e.message);
                        alert('Cannot create RTCPeerConnection object.');
                        return;
                    }
                }

                function handleIceCandidate(event) {
                    console.log('icecandidate event: ', event);
                    if (event.candidate) {
                        sendMessage({
                            type: 'candidate',
                            label: event.candidate.sdpMLineIndex,
                            id: event.candidate.sdpMid,
                            candidate: event.candidate.candidate
                        });
                    } else {
                        console.log('End of candidates.');
                    }
                }

                function handleCreateOfferError(event) {
                    console.log('createOffer() error: ', event);
                }

                function doCall() {
                    console.log('Sending offer to peer');
                    pc.createOffer(setLocalAndSendMessage, handleCreateOfferError);
                }

                function doAnswer() {
                    console.log('Sending answer to peer.');
                    pc.createAnswer().then(
                        setLocalAndSendMessage,
                        onCreateSessionDescriptionError
                    );
                }

                function setLocalAndSendMessage(sessionDescription) {
                    pc.setLocalDescription(sessionDescription);
                    console.log('setLocalAndSendMessage sending message', sessionDescription);
                    sendMessage(sessionDescription);
                }

                function onCreateSessionDescriptionError(error) {
                    trace('Failed to create session description: ' + error.toString());
                }

                function requestTurn(turnURL) {
                    let turnExists = false;
                    for (let i in pcConfig.iceServers) {
                        if (pcConfig.iceServers[i].urls.substr(0, 5) === 'turn:') {
                            turnExists = true;
                            turnReady = true;
                            break;
                        }
                    }
                    if (!turnExists) {
                        console.log('Getting TURN server from ', turnURL);
                        // No TURN server. Get one from computeengineondemand.appspot.com:
                        let xhr = new XMLHttpRequest();
                        xhr.onreadystatechange = function() {
                            if (xhr.readyState === 4 && xhr.status === 200) {
                                let turnServer = JSON.parse(xhr.responseText);
                                console.log('Got TURN server: ', turnServer);
                                pcConfig.iceServers.push({
                                    'urls': 'turn:' + turnServer.username + '@' + turnServer.turn,
                                    'credential': turnServer.password
                                });
                                turnReady = true;
                            }
                        };
                        xhr.open('GET', turnURL, true);
                        xhr.send();
                    }
                }

                function handleRemoteStreamAdded(event) {
                    console.log('Remote stream added.');
                    remoteStream = event.stream;
                    remoteVideo.srcObject = remoteStream;
                }

                function handleRemoteStreamRemoved(event) {
                    console.log('Remote stream removed. Event: ', event);
                }

                function hangup() {
                    console.log('Hanging up.');
                    stop();
                    sendMessage('bye');
                }

                function handleRemoteHangup() {
                    console.log('Session terminated.');
                    stop();
                    isInitiator = false;
                }

                function stop() {
                    isStarted = false;
                    pc.close();
                    pc = null;
                }
            // }
        })

        // socket.on("updateLocalVideo", (user) => {
        //     document.getElementById("localVideoContainer").innerHTML = "";
        //     let localVideoId = "localVideo" + user;
        //     $("#localVideoContainer").append("<video id=" + localVideoId + " autoplay playsinline></video>")
        // })
        //
        // socket.on("updateRemoteVideo", (userList) => {
        //     document.getElementById("remoteVideoContainer").innerHTML = "";
        //     for(let i = 0; i < userList.length; i++) {
        //         let remoteVideoId = "remoteVideo" + userList[i];
        //         $("#remoteVideoContainer").append("<video id=" + remoteVideoId + " autoplay playsinline></video>")
        //     }
        // })

        $(() => {
            $("#sendMsg").click(() => {
                let msg = $("#msg").val();
                $("#msg").val("");
                socket.emit("sendChat", msg);
            })
        })
    </script>
</body>
</html>