<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="chatroom.css">
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"></script>
    <title>WebRTC Chatroom</title>
</head>
<body>
    <h1>Tutors4Zoomers Chat</h1>
    <div id="videoContainer"></div>
<!--    <video id="localVideo" autoplay playsinline></video>-->
    <video id="remoteVideo" autoplay playsinline></video>

    <div>
        <button id="startButton">Start</button>
        <button id="callButton">Call</button>
        <button id="endButton">Hang up</button>
    </div>

    <div>
        <div id="conversation"></div>
        <input id="msg" type="text">
        <input id="sendMsg" type="button" value="Send">
    </div>

    <div>
        <p>Online</p>
        <div id="onlineUser"></div>
    </div>

    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
<!--    <script src="chatroom.js"></script>-->
    <script>
        let socket = io();
        socket.on("connect", () => {
            socket.emit("addUser", prompt("Hello! What is your name?"));
        });

        socket.on("updateChat", (username, data) => {
            $("#conversation").append("<b>" + username + "</b>" + data + "</br>");
        })

        socket.on("updateStatus", (userList) => {
            let onlineStatus = $("#onlineUser");
            document.getElementById("onlineUser").innerHTML = "";
            for(let i = 0; i < userList.length; i++) {
                onlineStatus.append("<b>" + userList[i] + "</b></br>");
            }
        })

        socket.on("connectVideo", (userList) => {
            // for(let i = 0; i < userList.length; i++) {
            //     let videoId = "localVideo" + userList[i];
            //
            //     const mediaStreamConstraints = {
            //         video: true,
            //         // audio: true,
            //     };
            //     const localVideo = document.getElementById(videoId);
            //     let localStream;
            //     function gotLocalMediaStream(mediaStream) {
            //         localStream = mediaStream;
            //         localVideo.srcObject = mediaStream;
            //     }
            //
            //     function handleLocalMediaStreamError(error) {
            //         console.log('navigator.getUserMedia error: ', error);
            //     }
            //
            //     navigator.mediaDevices.getUserMedia(mediaStreamConstraints)
            //         .then(gotLocalMediaStream).catch(handleLocalMediaStreamError)

            for(let i = 0; i < userList.length; i++) {
                let videoId = "localVideo" + userList[i];

                // 'use strict';

                const mediaStreamConstraints = {
                    video: true,
                    // audio: true,
                };

                const offerOptions = {
                    offerToReceiveVideo: 1,
                }

                let startTime = null;

                const localVideo = document.getElementById(videoId);
                const remoteVideo = document.getElementById('remoteVideo');

                let localStream;
                let remoteStream;

                function gotLocalMediaStream(mediaStream) {
                    localStream = mediaStream;
                    localVideo.srcObject = mediaStream;
                    trace('Received local stream.');
                    callButton.disabled =false;
                }

                function handleLocalMediaStreamError(error) {
                    trace('navigator.getUserMedia error: ${error.toString()}.');
                }

                function gotRemoteMediaStream(event) {
                    const mediaStream = event.stream;
                    remoteVideo.srcObject = mediaStream;
                    remoteStream = mediaStream;
                    trace('Remote peer connection received remote stream.');

                    function logVideoLoaded(event) {
                        const video = event.target;
                        trace(`${video.id} videoWidth: ${video.videoWidth}px, ` +
                            `videoHeight: ${video.videoHeight}px.`);
                    }
                }
                function logResizedVideo(event) {
                    logVideoLoaded(event);

                    if (startTime) {
                        const elapsedTime = window.performance.now() - startTime;
                        startTime = null;
                        trace(`Setup time: ${elapsedTime.toFixed(3)}ms.`);
                    }

                    localVideo.addEventListener('loadedmetadata', logVideoLoaded);
                    remoteVideo.addEventListener('loadedmetadata', logVideoLoaded);
                    remoteVideo.addEventListener('onresize', logResizedVideo);
                }

                function handleConnection(event) {
                    const peerConnection = event.target;
                    const iceCandidate = event.candidate;

                    if (iceCandidate) {
                        const newIceCandidate = new RTCIceCandidate(iceCandidate);
                        const otherPeer = getOtherPeer(peerConnection);

                        otherPeer.addIceCandidate(newIceCandidate)
                            .then(() => {
                                handleConnectionSuccess(peerConnection);
                            }).catch((error) => {
                            handleConnectionFailure(peerConnection, error);
                        });

                        trace(`${getPeerName(peerConnection)} ICE candidate:\n` +
                            `${event.candidate.candidate}.`);
                    }
                }
                function handleConnectionSuccess(peerConnection) {
                    trace(`${getPeerName(peerConnection)} addIceCandidate success.`);
                };

                function handleConnectionFailure(peerConnection, error) {
                    trace(`${getPeerName(peerConnection)} failed to add ICE Candidate:\n`+
                        `${error.toString()}.`);
                }

                function handleConnectionChange(event) {
                    const peerConnection = event.target;
                    console.log('ICE state change event: ', event);
                    trace(`${getPeerName(peerConnection)} ICE state: ` +
                        `${peerConnection.iceConnectionState}.`);
                }

                function setSessionDescriptionError(error) {
                    trace(`Failed to create session description: ${error.toString()}.`);
                }

                function setDescriptionSuccess(peerConnection, functionName) {
                    const peerName = getPeerName(peerConnection);
                    trace(`${peerName} ${functionName} complete.`);
                }

                function setLocalDescriptionSuccess(peerConnection) {
                    setDescriptionSuccess(peerConnection, 'setLocalDescription');
                }

                function setRemoteDescriptionSuccess(peerConnection) {
                    setDescriptionSuccess(peerConnection, 'setRemoteDescription');
                }

                function createdOffer(description) {
                    trace(`Offer from localPeerConnection:\n${description.sdp}`);

                    trace('localPeerConnection setLocalDescription start.');
                    localPeerConnection.setLocalDescription(description)
                        .then(() => {
                            setLocalDescriptionSuccess(localPeerConnection);
                        }).catch(setSessionDescriptionError);

                    trace('remotePeerConnection setRemoteDescription start.');
                    remotePeerConnection.setRemoteDescription(description)
                        .then(() => {
                            setRemoteDescriptionSuccess(remotePeerConnection);
                        }).catch(setSessionDescriptionError);

                    trace('remotePeerConnection createAnswer start.');
                    remotePeerConnection.createAnswer()
                        .then(createdAnswer)
                        .catch(setSessionDescriptionError);
                }

                function createdAnswer(description) {
                    trace(`Answer from remotePeerConnection:\n${description.sdp}.`);

                    trace('remotePeerConnection setLocalDescription start.');
                    remotePeerConnection.setLocalDescription(description)
                        .then(() => {
                            setLocalDescriptionSuccess(remotePeerConnection);
                        }).catch(setSessionDescriptionError);

                    trace('localPeerConnection setRemoteDescription start.');
                    localPeerConnection.setRemoteDescription(description)
                        .then(() => {
                            setRemoteDescriptionSuccess(localPeerConnection);
                        }).catch(setSessionDescriptionError);
                }

                const startButton = document.getElementById('startButton');
                const callButton = document.getElementById('callButton');
                const endButton = document.getElementById('endButton');

                callButton.disabled = true;
                endButton.disabled = true;

                function startAction() {
                    startButton.disabled = true;
                    navigator.mediaDevices.getUserMedia(mediaStreamConstraints)
                        .then(gotLocalMediaStream).catch(handleLocalMediaStreamError);
                    trace('Requesting local stream.');
                }

                function callAction() {
                    callButton.disabled = true;
                    endButton.disabled = false;

                    trace('Starting call.');
                    startTime = window.performance.now();

                    // Get local media stream tracks.
                    const videoTracks = localStream.getVideoTracks();
                    const audioTracks = localStream.getAudioTracks();
                    if (videoTracks.length > 0) {
                        trace(`Using video device: ${videoTracks[0].label}.`);
                    }
                    if (audioTracks.length > 0) {
                        trace(`Using audio device: ${audioTracks[0].label}.`);
                    }

                    const servers = null;  // Allows for RTC server configuration.

                    // Create peer connections and add behavior.
                    localPeerConnection = new RTCPeerConnection(servers);
                    trace('Created local peer connection object localPeerConnection.');

                    localPeerConnection.addEventListener('icecandidate', handleConnection);
                    localPeerConnection.addEventListener(
                        'iceconnectionstatechange', handleConnectionChange);

                    remotePeerConnection = new RTCPeerConnection(servers);
                    trace('Created remote peer connection object remotePeerConnection.');

                    remotePeerConnection.addEventListener('icecandidate', handleConnection);
                    remotePeerConnection.addEventListener(
                        'iceconnectionstatechange', handleConnectionChange);
                    remotePeerConnection.addEventListener('addstream', gotRemoteMediaStream);

                    // Add local stream to connection and create offer to connect.
                    localPeerConnection.addStream(localStream);
                    trace('Added local stream to localPeerConnection.');

                    trace('localPeerConnection createOffer start.');
                    localPeerConnection.createOffer(offerOptions)
                        .then(createdOffer).catch(setSessionDescriptionError);
                }

                function hangupAction() {
                    localPeerConnection.close();
                    remotePeerConnection.close();
                    localPeerConnection = null;
                    remotePeerConnection = null;
                    endButton.disabled = true;
                    callButton.disabled = false;
                    trace('Ending call.');
                }

                startButton.addEventListener('click', startAction);
                callButton.addEventListener('click', callAction);
                endButton.addEventListener('click', hangupAction);

                function getOtherPeer(peerConnection) {
                    return (peerConnection === localPeerConnection) ?
                        remotePeerConnection : localPeerConnection;
                }

                function getPeerName(peerConnection) {
                    return (peerConnection === localPeerConnection) ?
                        'localPeerConnection' : 'remotePeerConnection';
                }

                function trace(text) {
                    text = text.trim();
                    const now = (window.performance.now() / 1000).toFixed(3);

                    console.log(now, text);
                }

                navigator.mediaDevices.getUserMedia(mediaStreamConstraints)
                    .then(gotLocalMediaStream).catch(handleLocalMediaStreamError);



            }
        })

        socket.on("updateVideo", (userList) => {
            document.getElementById("videoContainer").innerHTML = "";
            for(let i = 0; i < userList.length; i++) {
                let videoId = "localVideo" + userList[i];
                $("#videoContainer").append("<video id=" + videoId + " autoplay playsinline></video>")
            }
        })

        $(() => {
            $("#sendMsg").click(() => {
                let msg = $("#msg").val();
                $("#msg").val("");
                socket.emit("sendChat", msg);
            })
        })
    </script>
</body>
</html>